#!/bin/bash

#autoshutdown

#small script that can be used as cron-job for autoshutdown 
#it will print a warn message and a timer. the user can cancel the action
#when he needs to work. otherwise the script causes the shutdown of the computer.

NIGHT_TIME=14 #by default 2 nighttime. This Variable holds the time in hours (24) for the first ask
TIME_STEP=30 #if the User is still working ask again in Miutes
DAY_TIME=8 #by default 8 daytime. This Variable holds the time the computer never asked to shutdown
counter=30 #the counter function. The time the user has to stop shutdown prozess

#Script needs root privilegues

timer()
{
while [ $counter -ne 0 ]
	do
		sleep 1
		echo $counter
		counter=$(($counter-1))
 	done
}

shutdown_test()
{
x=$(date +%H) #the actual time
	
	if [ $DAY_TIME -lt $NIGHT_TIME ] #(DT < NT)
		then
			if [[ $DAY_TIME -lt $x && $x -lt $NIGHT_TIME ]]
			#intervall in which the computer never shuts down
				then
					zenity --info --text="it's still daytime"
				else
					zenity --info --text="i shutdown"
			fi
		else #(NT < DT)
			if [[ $NIGHT_TIME -lt $x && $x -gt $DAY_TIME ]]
			#intervall in which the computer never shuts down
			#remember we are in a cyclic ring. so this defines an closed intervall as well
				then
					zenity --info --text="its still daytime"
				else
					zenity --info --text="i shutdown"
			fi
	fi
}

ask_again()
{
	zenity --info --text="I will ask again in $TIME_STEP minutes."
	WAIT_TIME=$(($TIME_STEP*60))
	sleep $WAIT_TIME
	#sleep 20
	main
}

main()
{
timer|zenity --progress --percentage=100 --auto-close --text="Computer is going to shutdown in $counter Seconds" && shutdown_test || ask_again
}

main

exit 0


#must be allways ontop to not shutdown the computer eg while watching a movie
#implement options -d $OPTARG (DAY_TIME) -n $OPTARG (NIGHT_TIME)
#verify wehther OPTARG < 23 and whether OPTARG=integer value 
