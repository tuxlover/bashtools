#!/bin/bash

#autoshutdown

#small script that can be used as cron-job for autoshutdown 
#it will print a warn message and a timer. the user can cancel the action
#when he needs to work. otherwise the script causes the shutdown of the computer.

NIGHT_TIME=14 #by default 2 nighttime. This Variable holds the time in hours (24) for the first ask
TIME_STEP=30 #if the User is still working ask again in Miutes
DAY_TIME=8 #by default 8 daytime. This Variable holds the time the computer never asked to shutdown
counter=30 #the counter function. The time the user has to stop shutdown prozess

#Script needs root privilegues

option_h() #a short help option starts here
{
	echo "call the script once as a cronjob"
	echo "Usage $0 [-d TIME -n TIME]"
	echo "-d set daytime"
	echo "-n set nightime"
	echo "Script will not shutdown the computer inbetween the intervall daytime to nighttime"
}


option_d() #set daytime in hours
{
unset DAY_TIME
DAY_TIME=$OPTARG


if [ $DAY_TIME -le 23 ]
#scince comparsion is only usefull for integer this insures that $DAY_TIME
#is an integer value in the range of 0 to 23.
#apperently it didnt work if you use logical operator so we need a nested if.
	then
		if [ $DAY_TIME -gt 0 ]
			then
				:
			else
				echo "not an vaild argument"
				echo "argument must be an integer value between 0 and 23"
			exit 1
		fi
	else
		echo "not an vaild argument"
		echo "argument must be an integer value between 0 and 23"
		exit 1
fi


}

option_n() #set nighttime in hours
{
unset NIGHT_TIME
NIGHT_TIME=$OPTARG


if [ $NIGHT_TIME -le 23 ]
#scince comparsion is only usefull for integer this insures $NIGHT_TIME
#is an integer value in the range of 0 to 23
#apperently it didnet work with logical operators so we need a nested if.
	then
		if [ $NIGHT_TIME -gt 0 ]
			then
				:
			else
				echo "not an vaild argument"
				echo "argument must be an integer value between 0 and 23"
			exit 1
		fi
	else
		echo "not an vaild argument"
		echo "argument must be an integer value between 0 and 23"
		exit 1
fi
}

while getopts d:n:h opt
	do
		case "$opt" in
			d) option_d
			;;
			n) option_n
			;;
			h) option_h
			;;
			\?) option_h
		esac
	done
shift `expr $OPTIND - 1`
		


timer()
{
while [ $counter -ne 0 ]
	do
		sleep 1
		echo $counter
		counter=$(($counter-1))
 	done
}

shut_me_down()
{
#This function stops the asking for shutdown if it is daytime
NOW_TIME=$(date %H)

	if [ $DAY_TIME -lt $NIGHT_TIME ] #(DT < NT)
		then
			if [[ $DAY_TIME -lt $NOW_TIME && $NOW_TIME -lt $NIGHT_TIME ]]
			#intervall in which the computer never shuts down
				then
					zenity --info --text="its daytime"
					exit 0
				else
					zenity --info --text="i shutdown"
					shutdown -h now
			fi
		else #(NT < DT)
			if [[ $NIGHT_TIME -lt $NOW_TIME && $NOW_TIME -gt $DAY_TIME ]]
			#intervall in which the computer never shuts down
			#remember we are in a cyclic ring. so this defines an closed intervall as well
				then
					zenity --info --text="it is daytime"
					exit 0
				else
					zenity --info --text="i shutdown"
					shutdown -h now
			fi
	fi
}

ask_again()
{
	zenity --info --text="I will ask again in $TIME_STEP minutes."
	WAIT_TIME=$(($TIME_STEP*60))
	sleep $WAIT_TIME
	main
}

zenity_call()
{
timer|zenity --progress --percentage=100 --auto-close --text="Computer is going to shutdown in $counter Seconds" && shut_me_down || ask_again
}

main()
{
NOW_TIME=$(date +%H)
		while [ $NOW_TIME -ne $NIGHT_TIME ]
			do
				echo "its not shuttime yet"
				echo "trying again in 30 seconds"
				sleep 30
				NOW_TIME=$(date +%H)
			done
zenity_call
}

main

exit 0


#must be allways ontop to not shutdown the computer eg while watching a movie
