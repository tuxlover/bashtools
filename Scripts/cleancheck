#!/bin/bash

#cleancheck.sh
#Script that does several Systemscans.
#It checks system integrety and logs information
#about the system. By default it will do a lot of scans
#and will need a long runtime.
#It creates logfiles which can be inspected aferwards.

##help_option starts here
option_h()
{
echo "$0 [-a PATH] [-c PATH] [-l NAME] [-e DIRS] [-h] [-s PATH] [-w ACPSU]"
echo "-a set path to clamscan  binary. if not set /usr/bin/clamscan is used"
echo "-c set path to  chkrootkit binary. if not set /usr/bin/rkhunter is used"
echo "-e exclude these dirs for scanning for viruses"
echo "   you have to seperate the directories by : character"
echo "	 example -e /home/:/media/:/mnt/"
echo "-f pretend to be the firstrun. this is usefull if you update your system"
echo "   and therefore the sha512sums dont match anymore"
echo "   WARNING be sure that you do this only when the system has been updated by rpm"
echo "-l set name and path to logdir"
echo "-h show this help"
echo "-q be as less verbose as possible and log only to logfile"
echo "-s set path to lynis binary. if not set /usr/bin/lynis is used"
echo "-w with feature explizit set feature"
echo "      A: scan for viruses"
echo "      C: check for rootkits"
echo "      S: check security holes"
echo "      P: do an package integrety-check. RPMS only"
echo "      U: only update or check the sha512 sums" 
echo "   You may also use this option to set the order of checks performed"
echo "   or to exclude actions that should not be performed."
exit 0	
}
##help option ends here

##setting up runtime varibales starts here

INDEX=$(date +%Y%m%d%H%M%S)

#first initilize the variables
ANTIVIR=
ROOTKIT_CHECKER=
SECURITY_CHECKER=
LOGFILE=
USE_QUIET=
FIRST_RUN=
declare -a EXCLUDE_DIRS=
declare -a WITH_FEATURE=
SHA_SUM=/var/log/selftest

option_a()
{
ANTIVIR="$OPTARG"
}

option_c()
{
ROOTKIT_CHECKER="$OPTARG"	
}

option_e()
{
EXCLUDE_DIRS="$OPTARG"
DIRS=$(echo $EXCLUDE_DIRS |  sed "s/:/\n/g" )
}

option_f()
{
FIRST_RUN="yes"	
}

option_l()
{
LOGFILE="$OPTARG"
}

option_q()
{
USE_QUIET="yes"
}

option_s()
{
SECURITY_CHECKER="$OPTARG"	
}

option_w()
{
W_F="$OPTARG"

#convert a contiguous string to an array
#where each letter is an element of the array

c=${#OPTARG}
while [ $c -ge 0 ]
	do
		WITH_FEATURE[$c]=${W_F:$c:1}
		c=$(($c-1))
	done
}



while getopts a:c:l:e:s:w:fhq opt
	do
		case "$opt" in
			a) option_a
			;;
			c) option_c
			;;
			h) option_h
			;;
			l) option_l
			;;
			e) option_e
			;;
			f) option_f
			;;
			s) option_s
			;;
			q) option_q
			;;
			w) option_w
			;;
			\?) option_h #in case of invalid option display help
		esac
	done
shift `expr $OPTIND - 1`

if [ -z $ANTIVIR ]
	then
		ANTIVIR="/usr/bin/clamscan" #enter the path to clamscan or the path to your virus scanner
fi

if [ -z $ROOTKIT_CHECKER ]
	then
		ROOTKIT_CHECKER="/usr/bin/rkhunter" #enter the path to your rootkitchecker
fi

if [ -z $SECURITY_CHECKER ] #check for open security holes
	then
		SECURITY_CHECKER="/usr/bin/lynis"
fi

if [ -z $USE_QUIET ]
	then
		USE_QUIET="no"
fi

if [ -z $FIRST_RUN ]
	then
		FIRST_RUN="no"
fi

if [ -z $LOGFILE ]
	then
		#to keep the logfile small
		#previous logfiles will be cleared 
		if [ -f /var/log/cleancheck.log ]
			then
				cat /dev/null > /var/log/cleancheck.log
		fi	
		LOGFILE="/var/log/cleancheck.log"
		touch $LOGFILE
	else
		unset LOGDIR
		LOGDIR=$(echo ${LOGFILE%/*} )
		if [ ! -d $LOGDIR ]
			then
				mkdir -p $LOGDIR
		fi
		
		if [ -f $LOGFILE ]
			then
				cat /dev/null > $LOGFILE
		fi
		touch $LOGFILE
fi
##setting up runtime variables ends here


#check whether you are root
check_root()
{
if [ $UID -ne 0 ]
	then 
		drop_failure
		echo "not root"
		exit 1
	else
		main
fi
}

#check whether programs and argumets are set correctly
check_antivir()
{
TEST_AV=$(${ANTIVIR} -V|grep ClamAV  2> /dev/null || echo "no" )	
echo "checking for $ANTIVIR" 2> /dev/null
if [ "$TEST_AV" = "no" ]
	then
		drop_failure
		echo "$ANTIVIR is not a valid clamav installation"
		exit 1
	else
		drop_ok
		echo "trying to update daily.cvd file"
		freshclam || echo "not possible"
fi
}

check_rootkit_checker()
{
TEST_CH=$(${ROOTKIT_CHECKER} --version | grep rkhunter || echo "no")
echo "checking for $ROOTKIT_CHECKER" 2> /dev/null
if [ "$TEST_CH" = "no" ] 
	then
		drop_failure
		echo "$ROOTKIT_CHECKER is not a valid rootkitcheker"
		exit 1
	else
		drop_ok
fi
}

check_lynis()
{
TEST_LY=$(${SECURITY_CHECKER} -V | grep [0-9] 2> /dev/null || echo "no")
echo "checking for $SECURITY_CHECKER" 2> /dev/null
if [ "$TEST_LY" = "no" ]
	then
		drop_failure
		echo "$SECURITY_CHECKER is not a valid security checker"
		exit 1
	else
		drop_ok
fi
}

exclude_this() #prepare exclude for clamscan 
{
for dir in  ${DIRS[@]}
	do
		echo \ 
		echo "--exclude-dir"=$dir
	done
}

verify_package()
{
is_rpm=$(rpm -q rpm && echo "yes")

if [ "$is_rpm" == "yes" ]
	then
		echo "with rpm package verification"
	else
		echo "package verification for rpm skipped"
fi

}


self_test()
{
SHA512_TEST=$(which sha512sum || echo "no")
SHA512=${SHA512_TEST}

if [ "$SHA512_TEST" = "no"  ]
	then 
		echo "the program for calculating the sha512 sum is not in the system"
		echo "please install it and rerun again"
		exit 1
fi
		
if [ ! -f $SHA_SUM/init/SHA_SUMS ]
	then
		echo "first run of $0. initilize sha512 checksums."
		mkdir -p $SHA_SUM/init
		{
			sha512sum $SHA512
			sha512sum $0
			sha512sum /bin/bash
			sha512sum $ANTIVIR
			sha512sum /usr/bin/freshclam
			sha512sum $ROOTKIT_CHECKER
			sha512sum $SECURITY_CHECKER
			sha512sum /bin/rpm			
		} >> $SHA_SUM/init/SHA_SUMS
		#imutable the SHA_SUMS because this is the weakest part of the script
		chattr +i $SHA_SUM/init/SHA_SUMS
	else
		if [ "$FIRST_RUN" != "no" ]
			then
				chattr -i $SHA_SUM/init/SHA_SUMS
				cat /dev/null > $SHA_SUM/init/SHA_SUMS
				{
					sha512sum $SHA512
					sha512sum $0
					sha512sum /bin/bash
					sha512sum $ANTIVIR
					sha512sum /usr/bin/freshclam
					sha512sum $ROOTKIT_CHECKER
					sha512sum $SECURITY_CHECKER
					sha512sum /bin/rpm			
				} >> $SHA_SUM/init/SHA_SUMS
		
				chattr +i $SHA_SUM/init/SHA_SUMS
				echo -e '\E[32mall ok'; tput sgr0
			else
				SUMS=$(sha512sum -c $SHA_SUM/init/SHA_SUMS)
					for sum in ${SUMS[@]}
						do
							if [[ "$sum"  = "FEHLSCHLAG" || "$sum" = "FAILED" ]]
								then
									echo  -e '\E[33mwarning:'; tput sgr0
									echo "at least one invalid checksum found"
									echo "use -f if you just updated your system"
									exit 1
							fi
						done
				echo -e '\E[32mall ok'; tput sgr0
		fi
fi	
}

#do the main action including check for dirs and files
main()
{
if [ ! -z $WITH_FEATURE ]
	then
		echo $INDEX >> $LOGFILE
		echo "file was created by $0" >> $LOGFILE
		echo "-----------------------------------------------------------------" >> $LOGFILE
		for feature in ${WITH_FEATURE[@]}
			do
				case $feature in
					A) check_antivir
					;;
					C) check_rootkit_checker
					;;
					S) check_lynis
				esac
			done
		self_test
		
		for feature in ${WITH_FEATURE[@]}
			do
				case $feature in
					A)
					if [ ! -z $EXCLUDE_DIRS ]
						then
							if [ "$USE_QUIET" != "no" ]
								then
									{
										echo "with clamscan" 
										echo "with excludedirs"
										echo "Skiping"
								
										for dir in ${DIRS[@]}
											do
												echo $dir
										done
				
										E=$( exclude_this)
										ANT=`$ANTIVIR -r -i $E /`
										echo "$ANT" 
									} >> $LOGFILE
								else
									{
										echo "with clamscan" 
										echo "with excludedirs"
										echo "Skiping"
								
										for dir in ${DIRS[@]}
											do
												echo $dir
										done
				
										E=$( exclude_this)
										ANT=`$ANTIVIR -r -i $E /`
										echo "$ANT" 
									}|tee -a $LOGFILE
							fi
						else
							if [ "$USE_QUIET" != "no" ]
								then
									{
										echo "with clamscan"
										ANT=`$ANTIVIR -r -i /`
										echo "$ANT" 
									}>> $LOGFILE
								else
									{
										echo "with clamscan"
										ANT=`$ANTIVIR -r -i /`
										echo "$ANT" 
									}|tee -a $LOGFILE
							fi
					fi
					;;
					C) 
					
						if [ "$USE_QUIET" != "no" ]
							then
								{
									echo "with chkrootkit" 
									CNT=`$ROOTKIT_CHECKER -c --novl --nocolors -sk --nolog`
									echo "$CNT"		
								}>> $LOGFILE
							else
									{
									echo "with chkrootkit"
									CNT=`$ROOTKIT_CHECKER -c --novl --nocolors -sk --nolog`
									echo "$CNT"		
								}|tee -a $LOGFILE
						fi
					;;
					S)
						if [ "$USE_QUIET" != "no" ]
							then
								{			
									echo "with lynis"
									SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
									echo "$SNT"      
								}>> $LOGFILE
							else
								{			
									echo "with lynis"
									SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
									echo "$SNT"      
								}|tee -a $LOGFILE
						fi
					;;
					P)
						if [ "$USE_QUIET" != "no" ]
							then
								{
									verify_package
								}>> $LOGFILE
							else
								{
									verify_package
								}|tee -a $LOGFILE
						fi
					;;
					U) :
					;;
					\?) 
						option_h #in case the option dont met display help
				esac
			done
		echo "------------------------------------------------------------------" >> $LOGFILE
	else
		if [ "$USE_QUIET" != "no" ]
			then
				{
					echo $INDEX
					echo "file was created by $0"
					echo "-----------------------------------------------------------------"
					echo "with clamscan"
					echo "with chkrootkit"
					echo "with lynis"
					check_antivir
					check_lynis 
					check_rootkit_checker
				}>> $LOGFILE
				self_test
			else
					{
					echo $INDEX
					echo "file was created by $0"
					echo "-----------------------------------------------------------------"
					echo "with clamscan"
					echo "with chkrootkit"
					echo "with lynis"
					check_antivir
					check_lynis 
					check_rootkit_checker
				}|tee -a $LOGFILE
				self_test
		fi
		
		if [ ! -z $EXCLUDE_DIRS ]
			then
				if [ "$USE_QUIET" != "no" ]
					then
							{
								echo "with clamscan" 
								echo "with excludedirs"
								echo "Skiping"
							
								for dir in ${DIRS[@]}
									do
										echo $dir
								done
				
								E=$( exclude_this)
								ANT=`$ANTIVIR -r -i $E /`
								echo "ANT" 
							}|>> $LOGFILE
					else
							{
								echo "with clamscan" 
								echo "with excludedirs"
								echo "Skiping"
								
								for dir in ${DIRS[@]}
									do
										echo $dir
								done
				
								E=$( exclude_this)
								ANT=`$ANTIVIR -r -i $E /`
								echo "ANT" 
							}|tee -a $LOGFILE
				fi
			else
				if [ "$USE_QUIET" != "no" ]
					then
						{
							echo "with clamscan"
							check_antivir
							ANT=`$ANTIVIR -r -i /`
							echo "$ANT"
						}>> $LOGFILE
					else
						{
							echo "with clamscan"
							check_antivir
							ANT=`$ANTIVIR -r -i /`
							echo "$ANT"
						}|tee -a $LOGFILE
				fi		
		fi
		if [ "$USE_QUIET" != "no" ]
			then
				{
					CNT=`$ROOTKIT_CHECKER -c --novl --nocolors -sk --nolog`
					echo "$CNT"		
					SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
					echo "$SNT"
		
					verify_package	

					echo "------------------------------------------------------------------"

				} >> $LOGFILE
			else
						{
					CNT=`$ROOTKIT_CHECKER -c --novl --nocolors -sk --nolog`
					echo "$CNT"		
					SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
					echo "$SNT"
		
					verify_package	

					echo "------------------------------------------------------------------"

				}|tee -a $LOGFILE
		fi
fi
}	

drop_failure ()
{
echo -e '\t \t \t \t \E[31mfailure'; tput sgr0
}

drop_ok ()
{
echo -e '\t \t \t \t \E[32mok'; tput sgr0
}

check_root

exit 0



#clean up the code
#colorize output
#verify package is kind of broken
#implement disks check health status
#rkhunter check for updates to be more reliable
#rkhunter first initilise database if not present yet
#selftests: look up if the binarys which being used are valid or have been changed
#make freshclam an extra variable
#need the sourcerpm of rkhunter to implement selfupdate
#dont use options but find needed programs by the script itself using which
#if package has fatal error reinstall it
#if rpm is not installed dont calculate checksum for program rpm
#if rkhunter database is not created creta this first. use rkhunter --proupd in an f statement to do this
