#!/bin/bash

#cleancheck.sh
#Script that does several Systemscans.
#It checks system integrety and logs information
#about the system. By default it will do a lot of scans
#and will need a long runtime.
#It creates Logfiles which can be inspeceted aferwards.

##help_option starts here
option_h()
{
echo "$0 [-a PATH] [-c PATH] [-l NAME] [-e DIRS] [-h] [-s PATH] [-w ACDSP]"
echo "-a set path to clamscan  binary. if not set /usr/bin/clamscan is used"
echo "-c set path to  chkrootkit binary. if not set /usr/sbin/chkrootkit is used"
echo "-e exclude these dirs for scanning for viruses"
echo "you have to seperate the directories by : example -e /home/:/media/:/mnt/"
echo "-l set name and path to logdir"
echo "-h show this help"
echo "-s set path to lynis binary. if not set /usr/bin/lynis is used"
echo "-w with feature explizit set feature"
echo "      A: scan for viruses"
echo "      C: check for rootkits"
echo "      D: only do the deletion of users files. action will be automaticly done if not root"
echo "      L: only do logging"
echo "      S: check security holes"
echo "      P do an package integrety-check. RPMS only" 
echo "      You may also use this option to set the order of checks performed"
echo "      or to exclude actions that should not be performed."
exit 1		
}
##help option ends here

##setting up runtime varibales starts here

INDEX=$(date +%Y%m%d%H%M%S)
USERS_HOME=$(cat /etc/passwd | cut -d ":" -f 6|grep /home/ && echo "/root")

#first initilize the variables
ANTIVIR=
ROOTKIT_CHECKER=
SECURITY_CHECKER=
LOGFILE=
USE_QUIETE=
declare -a EXCLUDE_DIRS=
declare -a WITH_FEATURE=

option_a()
{
ANTIVIR="$OPTARG"
}

option_c()
{
ROOTKIT_CHECKER="$OPTARG"	
}

option_e()
{
EXCLUDE_DIRS="$OPTARG"
DIRS=$(echo $EXCLUDE_DIRS |  sed "s/:/\n/g" )
}

option_l()
{
LOGFILE="$OPTARG"
}

option_s()
{
SECURITY_CHECKER="$OPTARG"	
}

option_w()
{
W_F="$OPTARG"

#convert a contiguous string to an array
#where each letter is an element of the array

c=${#OPTARG}
while [ $c -ge 0 ]
	do
		WITH_FEATURE[$c]=${W_F:$c:1}
		c=$(($c-1))
	done
}



while getopts a:c:l:e:s:w:h opt
	do
		case "$opt" in
			a) option_a
			;;
			c) option_c
			;;
			h) option_h
			;;
			l) option_l
			;;
			e) option_e
			;;
			s) option_s
			;;
			w) option_w
			;;
			\?) exit 1
		esac
	done
shift `expr $OPTIND - 1`

if [ -z $ANTIVIR ]
	then
		ANTIVIR="/usr/bin/clamscan" #enter the path to clamscan or the path to your virus scanner
fi

if [ -z $ROOTKIT_CHECKER ]
	then
		ROOTKIT_CHECKER="/sbin/chkrootkit" #enter the path to your rootkitchecker
fi

if [ -z $SECURITY_CHECKER ] #check for open security holes
	then
		SECURITY_CHECKER="/usr/bin/lynis"
fi


if [ -z $LOGFILE ]
	then
		#to keep the logfile small
		#previous logfiles will be cleared 
		if [ -f /var/log/cleancheck.log ]
			then
				cat /dev/null > /var/log/cleancheck.log
		fi	
		LOGFILE="/var/log/cleancheck.log"
		touch $LOGFILE
	else
		unset LOGDIR
		LOGDIR=$(echo ${LOGFILE%/*} )
		if [ ! -d $LOGDIR ]
			then
				mkdir -p $LOGDIR
		fi
		
		if [ -f $LOGFILE ]
			then
				cat /dev/null > $LOGFILE
		fi
		touch $LOGFILE
fi
##setting up runtime variables ends here


#check whether you are root
check_root()
{
if [ $UID -ne 0 ]
	then #use withfeature instead withoout_feature
		drop_failure
		echo "not root"
		clear_homes
	else
		main
fi
}

#check whether programs and argumets are set correctly
check_antivir()
{
	
echo "checking for $ANTIVIR" 2> /dev/null
if [ ! -x $ANTIVIR ]
	then
		drop_failure
		echo "$ANTIVIR is not a valid clamav installation"
		exit 1
	else
		drop_ok
		echo "trying to update daily.cvd file"
		wget -c --progress=dot:binary --directory-prefix=/var/lib/clamav/ http://db.local.clamav.net/daily.cvd || echo "not possible"
fi
}

check_rootkit_checker()
{

echo "checking for $ROOTKIT_CHECKER" 2> /dev/null
if [ ! -x $ROOTKIT_CHECKER ]
	then
		drop_failure
		echo "$ROOTKIT_CHECKER is not a valid rootkitcheker"
		exit 1
	else
		drop_ok
fi
}

check_lynis()
{
echo "checking for $SECURITY_CHECKER" 2> /dev/null
if [ ! -x $SECURITY_CHECKER ]
	then
		drop_failure
		echo "$SECURITY_CHECKER is not a valid"
		exit 1
	else
		drop_ok
fi
}

clear_homes()
{
echo "cleaning up users home"
for file in $USERS_HOME
	do
		find $file -type d -name .thumbnails -exec rm -r {} \;
		find $file -type f -name .recently-used -exec rm -r {} \;
		find $file -type f -name .recently-used.xbel -exec rm -r {} \;
	done	
}

exclude_this() #prepare exclude for clamscan 
{
for dir in  ${DIRS[@]}
	do
		echo \ 
		echo "--exclude-dir"=$dir
	done
}

verify_package()
{
rpm -q rpm 2> /dev/null && rpm -Va  |tee -a $LOGFILE || echo "skip this test"
}

log_users()
{
	{
	echo "Host information:"
	echo $LOGNAME"@"$HOSTNAME
	echo $MACHTYPE
	uname -r
	grep -m 1 "model name" /proc/cpuinfo | sed 's/^.*: //g'
	grep -m 1 "cpu MHz" /proc/cpuinfo | sed 's/^.*: //g'
	uptime
	echo "========================================================================================================="
	} |tee -a $LOGFILE
	
	{
	echo "Network information:"
	ifconfig 
	iwconfig
	ping -w 1 google.de 2> /dev/null

	if [ $? -gt "0" ]
	then
	echo "There is no connection running:"
	else	
	echo "You are running a connection to the internet"
  
	#scans only the localhost by default
	echo "nmap:"
	nmap $IP_ADRESS -v
	echo "netstat:"
	netstat
	fi

	echo "========================================================================================================="
	} |tee -a $LOGFILE
	
	{
	echo "The following users are logged in:"
	echo "=================================="
	finger
	n=0

	for m in ${USERS[@]}
		do
    
			if [ $m != $n ]
				then 
					id $m
					n=$m
			fi

		done

	id root

	echo "The following processes are running:"
	echo "===================================="
	echo "Sorted by User"
	k=0
	for i in ${USERS[@]}
		do

			if [ $i != $k ]
				then
					echo $i
					ps -U $i
					k=$i
			fi

	done

	echo "root"
	ps -U root

	echo "Treeview"
	pstree -pu
	echo "====================================================================================================="
	} |tee -a $LOGFILE
	
	{
	echo "These environment variables has been set:"
	env
	} |tee -a $LOGFILE
	
}

#do the main action including check for dirs and files
main()
{
if [ ! -z $WITH_FEATURE ]
	then
		echo $INDEX >> $LOGFILE
		echo "file was created by 

$0" >> $LOGFILE
		echo "-----------------------------------------------------------------" >> $LOGFILE
		for feature in ${WITH_FEATURE[@]}
			do
				case $feature in
					A)
					if [ ! -z $EXCLUDE_DIRS ]
						then
							echo "with clamscan"|tee -a $LOGFILE 
							echo "with excludedirs"
							check_antivir
							echo "Skiping"
							for dir in ${DIRS[@]}
								do
									echo $dir
								done
				
							E=$( exclude_this)
							ANT=`$ANTIVIR -r -i $E /`
							echo "$ANT" |tee -a $LOGFILE
						else
							echo "with clamscan"|tee -a $LOGFILE
							check_antivir
							ANT=`$ANTIVIR -r -i /`
							echo "$ANT" |tee -a $LOGFILE
					fi
					;;
					C) 
					echo "with chkrootkit"|tee -a $LOGFILE 
					check_rootkit_checker
					CNT=`$ROOTKIT_CHECKER`
					echo "$CNT" |tee -a $LOGFILE		
					;;
					D) 
					echo "with clear_homes"|tee -a $LOGFILE
					clear_homes
					;;
					L) 
					echo "with general logging"|tee -a $LOGFILE
					log_users
					;;  
					S) 			
					echo "with lynis"|tee -a $LOGFILE
					check_lynis
					SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
					echo "$SNT" |tee -a $LOGFILE      
					;;
					P)
					echo "with package verification"|tee -a $LOGFILE 
					verify_package
					;;
					\?) 
					option_h #in case the option dont met display help
				esac
			done
		echo "------------------------------------------------------------------" >> $LOGFILE
	else
		echo $INDEX >> $LOGFILE
		echo "file was created by $0" >> $LOGFILE
		echo "-----------------------------------------------------------------" >> $LOGFILE
		echo "with clamscan" |tee -a $LOGFILE
		echo "with chkrootkit"|tee -a $LOGFILE
		echo "with lynis"|tee -a $LOGFILE
		echo "with clear_homes"|tee -a $LOGFILE
		echo "with package verification"|tee -a $LOGFILE 
		echo "with general logging"|tee -a $LOGFILE
		check_antivir
		check_lynis 
		check_rootkit_checker

		if [ ! -z $EXCLUDE_DIRS ]
			then
				echo "with clamscan"|tee -a $LOGFILE 
				echo "with excludedirs"
				check_antivir
				echo "Skiping"
				for dir in ${DIRS[@]}
					do
						echo $dir
					done
				
				E=$( exclude_this)
				ANT=`$ANTIVIR -r -i $E /`
				echo "ANT" |tee -a $LOGFILE
			else
				echo "with clamscan"|tee -a $LOGFILE
				check_antivir
				ANT=`$ANTIVIR -r -i /`
				echo "$ANT" |tee -a $LOGFILE
		fi

		CNT=`$ROOTKIT_CHECKER`
		echo "$CNT"	>> $LOGFILE	
		SNT=`$SECURITY_CHECKER -c -Q --no-colors --no-log`
		echo "$SNT" |tee -a $LOGFILE

		echo "------------------------------------------------------------------" >> $LOGFILE

		verify_package
		log_users
		clear_homes		
fi
}	

drop_failure ()
{
echo -e '\t \t \t \t \E[31mfailure'; tput sgr0
}

drop_ok ()
{
echo -e '\t \t \t \t \E[32mok'; tput sgr0
}

check_root

exit 0


#the checking for valid is not much functional yet
#use -x testoperator to make sure it is executable
#use grep to grep for valid datanames
#clean up the code
#remove all prior logs option
#implement quite mode
#print line by line make the output more readable to users (checkrootkit)
